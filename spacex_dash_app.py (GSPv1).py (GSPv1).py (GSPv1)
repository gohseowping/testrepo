# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # dcc.Dropdown(id='site-dropdown',...)


# Define the dropdwon
    dcc.Dropdown(
        id='site-dropdown',
        options=[
            {'label': 'All Sites', 'value': 'ALL'},
            {'label': 'CCAFSLC-40', 'value': 'CCAFS LC-40'},
            {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
            {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
        ],
        value='ALL',
        placeholder="Select a Launch Site here",
        searchable=True
    ),

])


                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
 html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

# Define the callback function
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def update_success_pie_chart(selected_site):
    # Filter data based on selected site
    if selected_site == 'ALL':
        filtered_df = spacex_df
    else:
        filtered_df = spacex_df[spacex_df['LaunchSite'] == selected_site]

    # Filter data for successful launches
    success_df = filtered_df[filtered_df['class'] == 1]

    # Create the pie chart
    figure = px.pie(
        success_df,
        values='class',
        names='LaunchSites',
        title='Success Counts for ' + selected_site
    )
    return figure





                             
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)

dcc.RangeSlider(
        id='payload-slider',
        min=0,
        max=10000,
        step=1000,
        value=[0, 10000],
        marks={
            0: {'label': '0 kg'},
            2500: {'label': '2500 kg'},
            5000: {'label': '5000 kg'},
            7500: {'label': '7500 kg'},
            10000: {'label': '10000 kg'},
        },
    ),





# TASK 4: Add a scatter chart to show the correlation between payload and launch success
  html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

def update_scatter_chart(selected_site, selected_payload):
    # Filter data based on selected site
    if selected_site == 'ALL':
        filtered_df = spacex_df
    else:
        filtered_df = spacex_df[spacex_df['LaunchSite'] == selected_site]

    # Filter data based on selected payload range
    payload_min, payload_max = selected_payload
    filtered_df = filtered_df[(filtered_df['PayloadMass'] >= payload_min) & (filtered_df['PayloadMass'] <= payload_max)]

    # Create the scatter plot
    figure = px.scatter(
        filtered_df,
        x='PayloadMass',
        y='class',
        color='BoosterVersion',
        title='Payload Mass vs. Class (Filtered)'
    )

    return figure

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)


